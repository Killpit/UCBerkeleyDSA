An array is a collection of items of same data type stored at contiguous memory locations.

This makes it easier to calculate the position of each element by simply adding an offset to a base value.

The base value is index 0 and the difference between the two indexes is the offset.

Types of indexing in an array:

-0 (zero-based indexing): The first element of the array is indexed by a subscript of 0.
-1 (one-based indexing): The first element of the array is indexed by the subscript of 1
-n (N-based indexing): The base index of an array can be freely chosen. Usually, programming languages allowing
n-based indexing also allow negative index values, and other scalar data types like enumerations, or characters
may be used as an array index.

How an Array is initialized?

1-Passing no value within the initializer: One can initialize the array by defining the size of the array and passing
no values within the initializer.

2-By passing specific values within the initializer: One can initialize the array by defining the size of the array
and passing specific values within the initializer.

Note: The count of elements within the "{}", must be less than or equals to the size of the array

If the count of elements within the "{}" is less than the size of the array, the remaining positions are considered
to be '0'.

3-By passing specific values within the initializer but not declaring the size: One can initialize the array by
passing specific values within the initializer and not particularly mentioning the size, the size is interpreted by
the compiler.

4-Universal Initialization: After the adoption of universal initialization in C++, one can avoid using the equals
sign between the declaration and the initializer.

What are the different operations on the array?

Arrays allow random access to elements. This makes accessing elements by position faster. Hence, operation like
searching, insertion, and access becomes really efficient. Array elements can be accessed using the loops.

1-Insertion in Array:

We try to insert a value to a particular array index position, as the array provides random access, it can be done
easily using the assignment operator.

Pseudo Code:

//to insert a value = 10 at index position 2;
arr[2] = 10;

Time Complexity:

O(1) to insert a single element.
O(N) to insert all the array elements [where N is the size of the array]

2-Access elements in Array:

Accessing array elements become extremely important, in order to perform operations on arrays.

Pseudo Code:

//to access array element at index position 2, we simply can write
return arr[2];

Time Complexity: O(1)

3-Searching in Array:

We try to find a particular value in the array, in order to do that, we need to access all the array elements and
look for the particular value.

Pseudo Code:

// searching for value 2 in the array;

Loop from i = 0 to 5:
    check if  arr[i] = 2:
        return true;

Time Complexity: O(N), where N is the size of the array.

Advantages of using arrays:

-Arrays allow random access to elements. This makes accessing elements by position faster.
-Arrays have better cache locality, which makes a pretty big difference in performance.
-Arrays represent multiple data items of the same type using a single name.

Disadvantages of using arrays:

-The size can't be changed due to static memory allocation.
-Insertions and deletions are difficult as the elements are stored in consecutive memory locations and the shifting
operation is costly.

Applications on Array

-Array stores data elements of the same data type.
-Arrays are used when the size of the data set is known.
-Used in solving matrix problems.
-Applied as a lookup table in computer.
-Database records are also implemented by the array.
-Helps in implementing sorting algorithm.
-The different variables of the same type can be saved under one name.
-Arrays can be used for CPU scheduling.
-Used to Implement other data structures